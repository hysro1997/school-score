<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hysro.scores.mapper.ExamGradeStatisticMapper">

    <resultMap type="ExamGradeStatistic" id="ExamGradeStatisticResult">
        <result property="examGradeStatisticsId"    column="exam_grade_statistics_id"    />
        <result property="examNumbers"    column="exam_numbers"    />
        <result property="tripleQualifiedNumbers"    column="triple_qualified_numbers"    />
        <result property="tripleExcellentNumbers"    column="triple_excellent_numbers"    />
        <result property="tripleQualifiedPercentage"    column="triple_qualified_percentage"    />
        <result property="tripleExcellentPercentage"    column="triple_excellent_percentage"    />
        <result property="muitipleScore"    column="muitiple_score"    />
        <result property="grade"    column="grade"    />
        <result property="classes"    column="classes"    />
        <result property="muitipleRank"    column="muitiple_rank"    />
        <result property="averageRank"    column="average_rank"    />
        <result property="examId"    column="exam_id"    />
        <result property="allScore"    column="all_score"    />
        <result property="allScorePercentage"    column="all_score_percentage"    />
    </resultMap>

    <resultMap id="ExamExamGradeStatisticResult" type="ExamGradeStatistic" extends="ExamGradeStatisticResult">
        <collection property="exams" notNullColumn="sub_exam_id" javaType="Exams" resultMap="ExamsResult" />
    </resultMap>

    <resultMap type="Exams" id="ExamsResult">
        <result property="examId"    column="sub_exam_id"    />
        <result property="examName"    column="sub_exam_name"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="createBy"    column="sub_create_by"    />
    </resultMap>

    <sql id="selectExamGradeStatisticVo">
        select a.exam_grade_statistics_id, a.exam_numbers, a.triple_qualified_numbers, a.triple_excellent_numbers, a.triple_qualified_percentage, a.triple_excellent_percentage, a.muitiple_score, a.grade, a.classes, a.muitiple_rank, a.average_rank, a.exam_id, a.all_score, a.all_score_percentage, b.exam_id as sub_exam_id, b.exam_name as sub_exam_name, b.create_time as sub_create_time, b.create_by as sub_create_by  from exam_grade_statistic a
         left join exams b on b.exam_id = a.exam_id
    </sql>

    <select id="selectExamGradeStatisticList" parameterType="ExamGradeStatistic" resultMap="ExamExamGradeStatisticResult">
        <include refid="selectExamGradeStatisticVo"/>
        <where>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
            <if test="examId != null "> and a.exam_id = #{examId}</if>
            <if test="exams != null and exams.examName != null  and exams.examName != ''"> and exam_name like concat('%', #{exams.examName}, '%')</if>
        </where>
        order by a.exam_grade_statistics_id desc
    </select>

    <select id="selectDistinctGrade" parameterType="Long" resultType="map">
        SELECT DISTINCT grade FROM exam_grade_statistic WHERE exam_id = #{examId}
    </select>

    <select id="selectGradeMuitipleRank" parameterType="ExamGradeStatistic" resultMap="ExamGradeStatisticResult">
        SELECT
            a.*,(
            @i := @i + 1
            ) AS muitiple_rank
        FROM
            ( SELECT exam_grade_statistics_id FROM `exam_grade_statistic` WHERE exam_id = #{examId} AND grade = #{grade} ORDER BY muitiple_score DESC ) a,(
            SELECT
                @i := 0
        ) b
    </select>

    <select id="calculateExamGradeStatisticTwoGrade" parameterType="ExamGradeStatistic" resultMap="ExamGradeStatisticResult">
        SELECT
            *,
            ROUND( b.all_score_percentage * #{averageAgent} + b.triple_qualified_percentage * #{qualifiedAgent} + b.triple_excellent_percentage * #{excellentAgent}, 2 ) AS muitiple_score
        FROM
            (
                SELECT
                    *,
                    CONCAT( ROUND( a.all_score / ( a.exam_numbers * 200 ) * 100, 2 ), "%" ) AS all_score_percentage,
                    CONCAT( ROUND( a.triple_qualified_numbers / a.exam_numbers * 100, 2 ), "%" ) AS triple_qualified_percentage,
                    CONCAT( ROUND( a.triple_excellent_numbers / a.exam_numbers * 100, 2 ), "%" ) AS triple_excellent_percentage
                FROM
                    (
                        SELECT
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND maths_score IS NOT NULL
                                  AND chinese_score IS NOT NULL
                            ) AS exam_numbers,
                            grade,
                            exam_id,
                            classes,
                            (
                                    SUM( maths_score ) + SUM( chinese_score )) AS all_score,
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND chinese_score &gt;= 60
                                  AND maths_score  &gt;= 60
                            ) AS triple_qualified_numbers,
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND chinese_score  &gt;= #{excellentLineChinese}
                                  AND maths_score  &gt;= #{excellentLineMath}
                            ) AS triple_excellent_numbers
                        FROM
                            `exam_student_scores`
                        WHERE
                            exam_id = #{examId}
                          AND grade = #{grade}
                          AND classes = #{classes}
                    ) a
            ) b
    </select>

    <select id="calculateExamGradeStatisticFourGrade" parameterType="ExamGradeStatistic" resultMap="ExamGradeStatisticResult">
        SELECT
            *,
            ROUND( b.all_score_percentage * #{averageAgent} + b.triple_qualified_percentage * #{qualifiedAgent} + b.triple_excellent_percentage * #{excellentAgent}, 2 ) AS muitiple_score
        FROM
            (
                SELECT
                    *,
                    CONCAT( ROUND( a.all_score / ( a.exam_numbers * 300 ) * 100, 2 ), "%" ) AS all_score_percentage,
                    CONCAT( ROUND( a.triple_qualified_numbers / a.exam_numbers * 100, 2 ), "%" ) AS triple_qualified_percentage,
                    CONCAT( ROUND( a.triple_excellent_numbers / a.exam_numbers * 100, 2 ), "%" ) AS triple_excellent_percentage
                FROM
                    (
                        SELECT
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND maths_score IS NOT NULL
                                  AND chinese_score IS NOT NULL
                                  AND english_score IS NOT NULL
                            ) AS exam_numbers,
                            grade,
                            exam_id,
                            classes,
                            (
                                    SUM( maths_score ) + SUM( chinese_score ) + IFNULL( SUM( english_score ), 0 )) AS all_score,
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND chinese_score &gt;= 60
                                  AND maths_score  &gt;= 60
                                  AND english_score  &gt;= 60
                            ) AS triple_qualified_numbers,
                            (
                                SELECT
                                    COUNT(*)
                                FROM
                                    `exam_student_scores`
                                WHERE
                                    exam_id = #{examId}
                                  AND grade = #{grade}
                                  AND classes = #{classes}
                                  AND chinese_score  &gt;= #{excellentLineChinese}
                                  AND maths_score  &gt;= #{excellentLineMath}
                                  AND english_score  &gt;= #{excellentLineEnglish}
                            ) AS triple_excellent_numbers
                        FROM
                            `exam_student_scores`
                        WHERE
                            exam_id = #{examId}
                          AND grade = #{grade}
                          AND classes = #{classes}
                    ) a
            ) b
    </select>

    <select id="selectExamGradeStatistic" parameterType="ExamGradeStatistic" resultMap="ExamExamGradeStatisticResult">
        <include refid="selectExamGradeStatisticVo"/>
        <where>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
            <if test="examId != null "> and a.exam_id = #{examId}</if>
        </where>
    </select>

    <select id="selectExamGradeStatisticByExamGradeStatisticsId" parameterType="Long" resultMap="ExamGradeStatisticResult">
        <include refid="selectExamGradeStatisticVo"/>
        where exam_grade_statistics_id = #{examGradeStatisticsId}
    </select>

    <insert id="insertExamGradeStatistic" parameterType="ExamGradeStatistic" useGeneratedKeys="true" keyProperty="examGradeStatisticsId">
        insert into exam_grade_statistic
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="examNumbers != null">exam_numbers,</if>
            <if test="tripleQualifiedNumbers != null">triple_qualified_numbers,</if>
            <if test="tripleExcellentNumbers != null">triple_excellent_numbers,</if>
            <if test="tripleQualifiedPercentage != null">triple_qualified_percentage,</if>
            <if test="tripleExcellentPercentage != null">triple_excellent_percentage,</if>
            <if test="muitipleScore != null">muitiple_score,</if>
            <if test="grade != null">grade,</if>
            <if test="classes != null">classes,</if>
            <if test="muitipleRank != null">muitiple_rank,</if>
            <if test="averageRank != null">average_rank,</if>
            <if test="examId != null">exam_id,</if>
            <if test="allScore != null">all_score,</if>
            <if test="allScorePercentage != null">all_score_percentage,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="examNumbers != null">#{examNumbers},</if>
            <if test="tripleQualifiedNumbers != null">#{tripleQualifiedNumbers},</if>
            <if test="tripleExcellentNumbers != null">#{tripleExcellentNumbers},</if>
            <if test="tripleQualifiedPercentage != null">#{tripleQualifiedPercentage},</if>
            <if test="tripleExcellentPercentage != null">#{tripleExcellentPercentage},</if>
            <if test="muitipleScore != null">#{muitipleScore},</if>
            <if test="grade != null">#{grade},</if>
            <if test="classes != null">#{classes},</if>
            <if test="muitipleRank != null">#{muitipleRank},</if>
            <if test="averageRank != null">#{averageRank},</if>
            <if test="examId != null">#{examId},</if>
            <if test="allScore != null">#{allScore},</if>
            <if test="allScorePercentage != null">#{allScorePercentage},</if>
         </trim>
    </insert>

    <update id="updateExamGradeStatistic" parameterType="ExamGradeStatistic">
        update exam_grade_statistic
        <trim prefix="SET" suffixOverrides=",">
            <if test="examNumbers != null">exam_numbers = #{examNumbers},</if>
            <if test="tripleQualifiedNumbers != null">triple_qualified_numbers = #{tripleQualifiedNumbers},</if>
            <if test="tripleExcellentNumbers != null">triple_excellent_numbers = #{tripleExcellentNumbers},</if>
            <if test="tripleQualifiedPercentage != null">triple_qualified_percentage = #{tripleQualifiedPercentage},</if>
            <if test="tripleExcellentPercentage != null">triple_excellent_percentage = #{tripleExcellentPercentage},</if>
            <if test="muitipleScore != null">muitiple_score = #{muitipleScore},</if>
            <if test="grade != null">grade = #{grade},</if>
            <if test="classes != null">classes = #{classes},</if>
            <if test="muitipleRank != null">muitiple_rank = #{muitipleRank},</if>
            <if test="averageRank != null">average_rank = #{averageRank},</if>
            <if test="examId != null">exam_id = #{examId},</if>
            <if test="allScore != null">all_score = #{allScore},</if>
            <if test="allScorePercentage != null">all_score_percentage = #{allScorePercentage},</if>
        </trim>
        where exam_grade_statistics_id = #{examGradeStatisticsId}
    </update>

    <delete id="deleteExamGradeStatisticByExamGradeStatisticsId" parameterType="Long">
        delete from exam_grade_statistic where exam_grade_statistics_id = #{examGradeStatisticsId}
    </delete>

    <delete id="deleteExamGradeStatisticByExamId" parameterType="Long">
        delete from exam_grade_statistic where exam_id = #{examId}
    </delete>

    <delete id="deleteExamGradeStatisticByExamIds" parameterType="String">
        delete from exam_grade_statistic where exam_id in
        <foreach item="examId" collection="array" open="(" separator="," close=")">
            #{examId}
        </foreach>
    </delete>

    <delete id="deleteExamGradeStatisticByExamGradeStatisticsIds" parameterType="String">
        delete from exam_grade_statistic where exam_grade_statistics_id in
        <foreach item="examGradeStatisticsId" collection="array" open="(" separator="," close=")">
            #{examGradeStatisticsId}
        </foreach>
    </delete>
</mapper>
