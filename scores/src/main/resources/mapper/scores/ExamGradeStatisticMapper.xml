<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hysro.scores.mapper.ExamGradeStatisticMapper">

    <resultMap type="ExamGradeStatistic" id="ExamGradeStatisticResult">
        <result property="examGradeStatisticsId"    column="exam_grade_statistics_id"    />
        <result property="examNumbers"    column="exam_numbers"    />
        <result property="tripleQualifiedNumbers"    column="triple_qualified_numbers"    />
        <result property="tripleExcellentNumbers"    column="triple_excellent_numbers"    />
        <result property="tripleQualifiedPercentage"    column="triple_qualified_percentage"    />
        <result property="tripleExcellentPercentage"    column="triple_excellent_percentage"    />
        <result property="allScore"    column="all_score"    />
        <result property="allScorePercentage"    column="all_score_percentage"    />
        <result property="muitipleScore"    column="muitiple_score"    />
        <result property="grade"    column="grade"    />
        <result property="classes"    column="classes"    />
        <result property="rate"    column="rate"    />
        <result property="examId"    column="exam_id"    />
    </resultMap>

    <resultMap id="ExamGradeStatisticExamsResult" type="ExamGradeStatistic" extends="ExamGradeStatisticResult">
        <collection property="exams" notNullColumn="sub_exam_id" javaType="Exams" resultMap="ExamsResult" />
    </resultMap>

    <resultMap type="Exams" id="ExamsResult">
        <result property="examId"    column="sub_exam_id"    />
        <result property="examName"    column="sub_exam_name"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="createBy"    column="sub_create_by"    />
    </resultMap>

    <sql id="selectExamGradeStatisticVo">
        select a.exam_grade_statistics_id, a.exam_numbers, a.triple_qualified_numbers, a.triple_excellent_numbers, a.triple_qualified_percentage, a.triple_excellent_percentage,a.all_score,a.all_score_percentage, a.muitiple_score, a.grade, a.classes, a.rate, a.exam_id,
 b.exam_id as sub_exam_id, b.exam_name as sub_exam_name, b.create_time as sub_create_time, b.create_by as sub_create_by
        from exam_grade_statistic a
        left join exams b on b.exam_id = a.exam_id
    </sql>

    <select id="selectExamGradeStatisticList" parameterType="ExamGradeStatistic" resultMap="ExamGradeStatisticExamsResult">
        <include refid="selectExamGradeStatisticVo"/>
        <where>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="exams != null and exams.examName != null  and exams.examName != ''"> and exam_name like concat('%', #{exams.examName}, '%')</if>
        </where>
    </select>

    <select id="selectExamGradeStatisticByExamGradeStatisticsId" parameterType="Long" resultMap="ExamGradeStatisticExamsResult">
        <include refid="selectExamGradeStatisticVo"/>
        where a.exam_grade_statistics_id = #{examGradeStatisticsId}
    </select>

    <insert id="insertExamGradeStatistic" parameterType="ExamGradeStatistic">
        insert into exam_grade_statistic
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="examGradeStatisticsId != null">exam_grade_statistics_id,</if>
            <if test="examNumbers != null">exam_numbers,</if>
            <if test="tripleQualifiedNumbers != null">triple_qualified_numbers,</if>
            <if test="tripleExcellentNumbers != null">triple_excellent_numbers,</if>
            <if test="tripleQualifiedPercentage != null">triple_qualified_percentage,</if>
            <if test="tripleExcellentPercentage != null">triple_excellent_percentage,</if>
            <if test="allScore != null">all_score,</if>
            <if test="allScorePercentage != null">all_score_percentage,</if>
            <if test="muitipleScore != null">muitiple_score,</if>
            <if test="grade != null">grade,</if>
            <if test="classes != null">classes,</if>
            <if test="rate != null">rate,</if>
            <if test="examId != null">exam_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="examGradeStatisticsId != null">#{examGradeStatisticsId},</if>
            <if test="examNumbers != null">#{examNumbers},</if>
            <if test="tripleQualifiedNumbers != null">#{tripleQualifiedNumbers},</if>
            <if test="tripleExcellentNumbers != null">#{tripleExcellentNumbers},</if>
            <if test="tripleQualifiedPercentage != null">#{tripleQualifiedPercentage},</if>
            <if test="tripleExcellentPercentage != null">#{tripleExcellentPercentage},</if>
            <if test="allScore != null">#{allScore},</if>
            <if test="allScorePercentage != null">#{allScorePercentage},</if>
            <if test="muitipleScore != null">#{muitipleScore},</if>
            <if test="grade != null">#{grade},</if>
            <if test="classes != null">#{classes},</if>
            <if test="rate != null">#{rate},</if>
            <if test="examId != null">#{examId},</if>
         </trim>
    </insert>

    <update id="updateExamGradeStatistic" parameterType="ExamGradeStatistic">
        update exam_grade_statistic
        <trim prefix="SET" suffixOverrides=",">
            <if test="examNumbers != null">exam_numbers = #{examNumbers},</if>
            <if test="tripleQualifiedNumbers != null">triple_qualified_numbers = #{tripleQualifiedNumbers},</if>
            <if test="tripleExcellentNumbers != null">triple_excellent_numbers = #{tripleExcellentNumbers},</if>
            <if test="tripleQualifiedPercentage != null">triple_qualified_percentage = #{tripleQualifiedPercentage},</if>
            <if test="tripleExcellentPercentage != null">triple_excellent_percentage = #{tripleExcellentPercentage},</if>
            <if test="allScore != null">all_score = #{allScore},</if>
            <if test="allScorePercentage != null">all_score_percentage = #{allScorePercentage},</if>
            <if test="muitipleScore != null">muitiple_score = #{muitipleScore},</if>
            <if test="grade != null">grade = #{grade},</if>
            <if test="classes != null">classes = #{classes},</if>
            <if test="rate != null">rate = #{rate},</if>
            <if test="examId != null">exam_id = #{examId},</if>
        </trim>
        where exam_grade_statistics_id = #{examGradeStatisticsId}
    </update>

    <delete id="deleteExamGradeStatisticByExamGradeStatisticsId" parameterType="Long">
        delete from exam_grade_statistic where exam_grade_statistics_id = #{examGradeStatisticsId}
    </delete>

    <delete id="deleteExamGradeStaticticsByExamId" parameterType="Long">
        delete from exam_grade_statistic where exam_id = #{examId}
    </delete>

    <delete id="deleteExamGradeStatisticByExamGradeStatisticsIds" parameterType="String">
        delete from exam_grade_statistic where exam_grade_statistics_id in
        <foreach item="examGradeStatisticsId" collection="array" open="(" separator="," close=")">
            #{examGradeStatisticsId}
        </foreach>
    </delete>

    <delete id="deleteExamsByExamIds" parameterType="String">
        delete from exams where exam_id in
        <foreach item="examId" collection="array" open="(" separator="," close=")">
            #{examId}
        </foreach>
    </delete>

    <delete id="deleteExamsByExamId" parameterType="Long">
        delete from exams where exam_id = #{examId}
    </delete>

    <insert id="batchExams">
        insert into exams( exam_id, exam_name, create_time, create_by) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.examId}, #{item.examName}, #{item.createTime}, #{item.createBy})
        </foreach>
    </insert>
</mapper>
