<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hysro.scores.mapper.ExamClassStaticticsMapper">

    <resultMap type="ExamClassStatictics" id="ExamClassStaticticsResult">
        <result property="examStatisticsId"    column="exam_statistics_id"    />
        <result property="grade"    column="grade"    />
        <result property="classes"    column="classes"    />
        <result property="subject"    column="subject"    />
        <result property="examNumbers"    column="exam_numbers"    />
        <result property="fullSocreNumbers"    column="full_socre_numbers"    />
        <result property="excellentNumbers"    column="excellent_numbers"    />
        <result property="goodNumbers"    column="good_numbers"    />
        <result property="qualifiedNumbers"    column="qualified_numbers"    />
        <result property="unqualifiedOneNumbers"    column="unqualified_one_numbers"    />
        <result property="unqualifiedTwoNumbers"    column="unqualified_two_numbers"    />
        <result property="unqualifiedThreeNumbers"    column="unqualified_three_numbers"    />
        <result property="unqualifiedFourNumbers"    column="unqualified_four_numbers"    />
        <result property="totalScore"    column="total_score"    />
        <result property="averageScore"    column="average_score"    />
        <result property="qualifiedPercentage"    column="qualified_percentage"    />
        <result property="excellentPercentage"    column="excellent_percentage"    />
        <result property="muitipleScore"    column="muitiple_score"    />
        <result property="examId"    column="exam_id"    />
        <result property="muitipleRank"    column="muitiple_rank"    />
        <result property="averageRank"    column="average_rank"    />
    </resultMap>

    <resultMap id="ExamExamClassStaticticsResult" type="ExamClassStatictics" extends="ExamClassStaticticsResult">
        <collection property="exams" notNullColumn="sub_exam_id" javaType="Exams" resultMap="ExamsResult" />
    </resultMap>

    <resultMap type="Exams" id="ExamsResult">
        <result property="examId"    column="sub_exam_id"    />
        <result property="examName"    column="sub_exam_name"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="createBy"    column="sub_create_by"    />
    </resultMap>

    <resultMap type="ClassesStatisticEchartsHelper" id="HelperResult">
        <result property="examName"    column="exam_name"    />
        <result property="rate"    column="rate"    />
        <result property="teacherName" column="teacher_name"    />
    </resultMap>

    <sql id="selectExamClassStaticticsVo">
        select a.exam_statistics_id, a.grade, a.classes, a.subject, a.exam_numbers, a.full_socre_numbers, a.excellent_numbers, a.good_numbers, a.qualified_numbers, a.unqualified_one_numbers, a.unqualified_two_numbers, a.unqualified_three_numbers, a.unqualified_four_numbers, a.total_score, a.average_score, a.qualified_percentage, a.excellent_percentage, a.muitiple_score, a.exam_id, a.muitiple_rank, a.average_rank, b.exam_id as sub_exam_id, b.exam_name as sub_exam_name, b.create_time as sub_create_time, b.create_by as sub_create_by  from exam_class_statictics a
         left join exams b on b.exam_id = a.exam_id
    </sql>
    <sql id="calculateClassStatisticsVo">
        SELECT COUNT( * ) FROM `exam_student_scores`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
        </where>
    </sql>

    <select id="selectRatesByGradeClassesExamTimeOrderType" parameterType="ExamClassStatictics" resultMap="HelperResult">
        SELECT e.exam_name, c.${subjectName} AS rate, et.teacher_name FROM exam_class_statictics c
        LEFT JOIN exams e ON c.exam_id = e.exam_id
		LEFT JOIN exam_teacher et ON c.exam_id = et.exam_id
        WHERE c.`subject` = #{subject} AND c.grade = #{grade} AND c.classes = #{classes}
          AND et.classes = #{classes} AND et.subjects = #{subject} AND et.grade = #{grade}
         AND e.create_time BETWEEN #{subjectName2} AND #{subjectName3}
    </select>

    <select id="selectSubjectsByExamIdAndGrade" parameterType="ExamClassStatictics" resultType="String">
        SELECT DISTINCT `subject` FROM `exam_class_statictics`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="subject != null  and subject != ''"> and `subject` = #{subject}</if>
        </where>
    </select>

    <select id="selectAverageScoreByExamIdAndGrade" parameterType="ExamClassStatictics" resultType="String">
        SELECT ${subjectName} FROM `exam_class_statictics`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="subject != null  and subject != ''"> and `subject` = #{subject}</if>
        </where>
        ORDER BY ${subjectName} DESC
    </select>

    <select id="selectClassesRateByExamIdAndGrade" parameterType="ExamClassStatictics" resultType="String">
        SELECT DISTINCT classes FROM `exam_class_statictics`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="subject != null  and subject != ''"> and `subject` = #{subject}</if>
        </where>
        ORDER BY classes
    </select>
    <select id="selectClassesSubjectRateMuitipleRankByExamIdAndGrade" parameterType="ExamClassStatictics" resultType="int">
        SELECT muitiple_rank FROM `exam_class_statictics`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="subject != null  and subject != ''"> and `subject` = #{subject}</if>
        </where>
        ORDER BY classes
    </select>

    <select id="selectClassesSubjectRateAvgRankByExamIdAndGrade" parameterType="ExamClassStatictics" resultType="int">
        SELECT average_rank FROM `exam_class_statictics`
        <where>
            <if test="examId != null "> and exam_id = #{examId}</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="subject != null  and subject != ''"> and `subject` = #{subject}</if>
        </where>
        ORDER BY classes
    </select>

    <select id="selectMuitipleRank"  parameterType="ExamClassStatictics" resultMap="ExamClassStaticticsResult">
        SELECT
            a.*,(
            @i := @i + 1
            ) AS muitiple_rank
        FROM
            ( SELECT exam_statistics_id FROM exam_class_statictics WHERE exam_id = #{examId} AND grade = #{grade} AND `subject` = #{subject} ORDER BY muitiple_score DESC ) a,(
            SELECT
                @i := 0
        ) b
    </select>

    <select id="selectAverageRank"  parameterType="ExamClassStatictics" resultMap="ExamClassStaticticsResult">
        SELECT
            a.*,(
            @i := @i + 1
            ) AS average_rank
        FROM
            ( SELECT exam_statistics_id FROM exam_class_statictics WHERE exam_id = #{examId} AND grade = #{grade} AND `subject` = #{subject} ORDER BY average_score DESC ) a,(
            SELECT
                @i := 0
        ) b
    </select>

    <select id="selectExamClassStaticticsList" parameterType="ExamClassStatictics" resultMap="ExamExamClassStaticticsResult">
        <include refid="selectExamClassStaticticsVo"/>
        <where>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
            <if test="subject != null  and subject != ''"> and subject = #{subject}</if>
            <if test="examId != null "> and a.exam_id = #{examId}</if>
            <if test="exams != null and exams.examName != null  and exams.examName != ''"> and exam_name like concat('%', #{exams.examName}, '%')</if>
        </where>
        order by a.exam_statistics_id desc
    </select>
    <select id="selectExamClassStatictics" parameterType="ExamClassStatictics" resultMap="ExamExamClassStaticticsResult">
        <include refid="selectExamClassStaticticsVo"/>
        <where>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
            <if test="classes != null  and classes != ''"> and classes = #{classes}</if>
            <if test="subject != null  and subject != ''"> and subject = #{subject}</if>
            <if test="examId != null "> and a.exam_id = #{examId}</if>
        </where>
    </select>

    <!-- 为什么这里用0.9，因为这样能统计到0.5分的情况，用1会导致多少.5分不能统计到 -->
    <select id="calculateClassStatistics" parameterType="ExamClassStatictics" resultMap="ExamClassStaticticsResult">
        SELECT *, ROUND(b.average_score * #{averageAgent} + b.excellent_percentage*#{excellentAgent} + b.qualified_percentage*#{qualifiedAgent},2) AS muitiple_score from
        (SELECT
        *, CONCAT(ROUND((a.full_socre_numbers + a.excellent_numbers) / a.exam_numbers * 100,2),"%") AS excellent_percentage,
        CONCAT(ROUND((a.full_socre_numbers + a.excellent_numbers + a.good_numbers + a.qualified_numbers) / a.exam_numbers * 100,2),"%") AS qualified_percentage
        FROM
        (
        SELECT
        grade,
        classes,
        exam_id,
        COUNT( ${subjectName} ) AS exam_numbers,
        SUM( ${subjectName} ) AS total_score,
        ROUND( AVG( ${subjectName} ), 2 ) AS average_score,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} = #{fullLine} ) AS full_socre_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{excellentLine} AND (${fullLine - 0.01}) ) AS excellent_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{goodLine} AND (${excellentLine - 0.01}) ) AS good_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{qualifiedLine} AND (${goodLine - 0.01}) ) AS qualified_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{unqualifiedOneLine} AND (${qualifiedLine - 0.01}) ) AS unqualified_one_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{unqualifiedTwoLine} AND (${unqualifiedOneLine - 0.01}) ) AS unqualified_two_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{unqualifiedThreeLine} AND (${unqualifiedTwoLine - 0.01}) ) AS unqualified_three_numbers,
        ( <include refid="calculateClassStatisticsVo" /> and ${subjectName} BETWEEN #{unqualifiedFourLine} AND (${unqualifiedThreeLine - 0.01})  ) AS unqualified_four_numbers
        FROM
        `exam_student_scores`
        WHERE
        exam_id = #{examId}
        AND grade = #{grade}
        AND classes = #{classes}
        ) a) b
    </select>

    <select id="selectExamClassStaticticsByExamStatisticsId" parameterType="Long" resultMap="ExamClassStaticticsResult">
        <include refid="selectExamClassStaticticsVo"/>
        where exam_statistics_id = #{examStatisticsId}
    </select>

    <select id="selectDistinceGradeSubject" parameterType="Long" resultType="map">
        SELECT DISTINCT grade, `subject` FROM `exam_class_statictics` WHERE exam_id = #{examId}
    </select>

    <insert id="insertExamClassStatictics" parameterType="ExamClassStatictics" useGeneratedKeys="true" keyProperty="examStatisticsId">
        insert into exam_class_statictics
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="grade != null">grade,</if>
            <if test="classes != null">classes,</if>
            <if test="subject != null">subject,</if>
            <if test="examNumbers != null">exam_numbers,</if>
            <if test="fullSocreNumbers != null">full_socre_numbers,</if>
            <if test="excellentNumbers != null">excellent_numbers,</if>
            <if test="goodNumbers != null">good_numbers,</if>
            <if test="qualifiedNumbers != null">qualified_numbers,</if>
            <if test="unqualifiedOneNumbers != null">unqualified_one_numbers,</if>
            <if test="unqualifiedTwoNumbers != null">unqualified_two_numbers,</if>
            <if test="unqualifiedThreeNumbers != null">unqualified_three_numbers,</if>
            <if test="unqualifiedFourNumbers != null">unqualified_four_numbers,</if>
            <if test="totalScore != null">total_score,</if>
            <if test="averageScore != null">average_score,</if>
            <if test="qualifiedPercentage != null">qualified_percentage,</if>
            <if test="excellentPercentage != null">excellent_percentage,</if>
            <if test="muitipleScore != null">muitiple_score,</if>
            <if test="examId != null">exam_id,</if>
            <if test="muitipleRank != null">muitiple_rank,</if>
            <if test="averageRank != null">average_rank,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="grade != null">#{grade},</if>
            <if test="classes != null">#{classes},</if>
            <if test="subject != null">#{subject},</if>
            <if test="examNumbers != null">#{examNumbers},</if>
            <if test="fullSocreNumbers != null">#{fullSocreNumbers},</if>
            <if test="excellentNumbers != null">#{excellentNumbers},</if>
            <if test="goodNumbers != null">#{goodNumbers},</if>
            <if test="qualifiedNumbers != null">#{qualifiedNumbers},</if>
            <if test="unqualifiedOneNumbers != null">#{unqualifiedOneNumbers},</if>
            <if test="unqualifiedTwoNumbers != null">#{unqualifiedTwoNumbers},</if>
            <if test="unqualifiedThreeNumbers != null">#{unqualifiedThreeNumbers},</if>
            <if test="unqualifiedFourNumbers != null">#{unqualifiedFourNumbers},</if>
            <if test="totalScore != null">#{totalScore},</if>
            <if test="averageScore != null">#{averageScore},</if>
            <if test="qualifiedPercentage != null">#{qualifiedPercentage},</if>
            <if test="excellentPercentage != null">#{excellentPercentage},</if>
            <if test="muitipleScore != null">#{muitipleScore},</if>
            <if test="examId != null">#{examId},</if>
            <if test="muitipleRank != null">#{muitipleRank},</if>
            <if test="averageRank != null">#{averageRank},</if>
         </trim>
    </insert>

    <update id="updateExamClassStatictics" parameterType="ExamClassStatictics">
        update exam_class_statictics
        <trim prefix="SET" suffixOverrides=",">
            <if test="grade != null">grade = #{grade},</if>
            <if test="classes != null">classes = #{classes},</if>
            <if test="subject != null">subject = #{subject},</if>
            <if test="examNumbers != null">exam_numbers = #{examNumbers},</if>
            <if test="fullSocreNumbers != null">full_socre_numbers = #{fullSocreNumbers},</if>
            <if test="excellentNumbers != null">excellent_numbers = #{excellentNumbers},</if>
            <if test="goodNumbers != null">good_numbers = #{goodNumbers},</if>
            <if test="qualifiedNumbers != null">qualified_numbers = #{qualifiedNumbers},</if>
            <if test="unqualifiedOneNumbers != null">unqualified_one_numbers = #{unqualifiedOneNumbers},</if>
            <if test="unqualifiedTwoNumbers != null">unqualified_two_numbers = #{unqualifiedTwoNumbers},</if>
            <if test="unqualifiedThreeNumbers != null">unqualified_three_numbers = #{unqualifiedThreeNumbers},</if>
            <if test="unqualifiedFourNumbers != null">unqualified_four_numbers = #{unqualifiedFourNumbers},</if>
            <if test="totalScore != null">total_score = #{totalScore},</if>
            <if test="averageScore != null">average_score = #{averageScore},</if>
            <if test="qualifiedPercentage != null">qualified_percentage = #{qualifiedPercentage},</if>
            <if test="excellentPercentage != null">excellent_percentage = #{excellentPercentage},</if>
            <if test="muitipleScore != null">muitiple_score = #{muitipleScore},</if>
            <if test="examId != null">exam_id = #{examId},</if>
            <if test="muitipleRank != null">muitiple_rank = #{muitipleRank},</if>
            <if test="averageRank != null">average_rank = #{averageRank},</if>
        </trim>
        where exam_statistics_id = #{examStatisticsId}
    </update>

    <delete id="deleteExamClassStaticticsByExamStatisticsId" parameterType="Long">
        delete from exam_class_statictics where exam_statistics_id = #{examStatisticsId}
    </delete>

    <delete id="deleteExamClassStaticticsByExamId" parameterType="Long">
        delete from exam_class_statictics where exam_id = #{examId}
    </delete>

    <delete id="deleteExamClassStaticticsByExamIds" parameterType="String">
        delete from exam_class_statictics where exam_id in
        <foreach item="examId" collection="array" open="(" separator="," close=")">
            #{examId}
        </foreach>
    </delete>

    <delete id="deleteExamClassStaticticsByExamStatisticsIds" parameterType="String">
        delete from exam_class_statictics where exam_statistics_id in
        <foreach item="examStatisticsId" collection="array" open="(" separator="," close=")">
            #{examStatisticsId}
        </foreach>
    </delete>
</mapper>
